// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2022-04-06 16:59:07
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DesktopDao is the data access object for table desktop.
type DesktopDao struct {
	table   string         // table is the underlying table name of the DAO.
	group   string         // group is the database configuration group name of current DAO.
	columns DesktopColumns // columns contains all the column names of Table for convenient usage.
}

// DesktopColumns defines and stores column names for table desktop.
type DesktopColumns struct {
	Uuid            string // 桌面uuid
	VmUuid          string // 虚拟化平台上虚机的uuid
	DisplayName     string // 桌面的显示名称
	GpuAttachStatus string // 桌面挂载gpu状态，'preAttached'表示预挂载，即关联了GPU规格的关机态虚机,'attached'表示已经挂载,'unattached'表示未挂载
	Enabled         string // 桌面的启用状态，enabled表示启用，disabled表示桌面已禁用
	NodeUuid        string // 物理机uuid
	NodeName        string // 物理机名称
	IsDefault       string // 是否是默认桌面，False表示不是，True表示是。默认False。
	Desc            string // 桌面的描述信息
	CreatedAt       string // 创建时间
	UpdatedAt       string // 最后修改时间
}

//  desktopColumns holds the columns for table desktop.
var desktopColumns = DesktopColumns{
	Uuid:            "uuid",
	VmUuid:          "vm_uuid",
	DisplayName:     "display_name",
	GpuAttachStatus: "gpu_attach_status",
	Enabled:         "enabled",
	NodeUuid:        "node_uuid",
	NodeName:        "node_name",
	IsDefault:       "is_default",
	Desc:            "desc",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

// NewDesktopDao creates and returns a new DAO object for table data access.
func NewDesktopDao() *DesktopDao {
	return &DesktopDao{
		group:   "default",
		table:   "desktop",
		columns: desktopColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DesktopDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DesktopDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DesktopDao) Columns() DesktopColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DesktopDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DesktopDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DesktopDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
